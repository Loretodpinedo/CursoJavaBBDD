 Scrapbook Page

Este tipo de "hojas en sucio" son una manera sencilla de poder probar porciones de código antes de añadirlos al programa final. Tan solo tenemos que crear una "Scrapbook Page" en la carpeta que deseemos y escribir después el código que deseemos dentro de ella.

No es necesario introducir el código dentro de un método main para ejecutarlo.

En Eclipse 3.0 las "scrapbook pages" no aparecen directamente en el menú contextual. Para poder crear la "hoja en sucio" selecciona "New > Other > Java > Java Run/Debug > Scrapbook Page".

 Etiquetas de Javadoc

Los comentarios que el programador quiera hacer en el programa irán precedidos con "//" mientras que los comentarios realizados por el JAVADoc estarán precedidos de "/**". Cuando creemos un método y añadamos "/** + ENTER" sobre la signatura del método añadirá información sobre el JAVADoc como puedan ser "@param [nombreParámetro] [comentario]", "@return [descripciónDatosDevueltos]" y "@throws [tipoExcepción] [comentario]". Pulsar "CTRL + Espacio" dentro de un bloque "/** ... */" mostrará toda la lista de etiquetas Javadoc posibles. 


 5. Entorno de desarrollo Eclipse.

Eclipse 3.0 permite especificar opciones avanzadas de formateo de código. La página de opciones que nos permiten personalizar el formateo del código ha sido trasladada a "Window > Preferences > Java > Code Style > Code Formatter".

A pesar de que las opciones se pueden configurar el gusto del consumidor, estas ya vienen configuradas por defecto para cumplir con las convenciones JAVA. 

 Organise and Add Imports

Las sentencias de importación se muestran de manera correcta siempre y cuando estemos usando las funciones de autocompletar código para el nombre de una clase JAVA, es posible añadir nuevas sentencias de importación haciendo uso de la función "Add Import". Mediante el uso "Organise Imports" eliminará de forma automática todas las declaraciones de importación que hayamos hecho y no estén siendo utilizadas, con el fin de hacer el código un poco más eficiente, ya que estas importaciones no serán añadidas en tiempo de compilación. El método abreviado del teclado que viene configurado por defecto es "CTRL + Mayúsculas + O". 

 Rename

Para invocar la función de renombrado hay que tener previamente seleccionado un elemento. Usar la opción de "update references" actualizará cualquier referencia al nuevo elemento renombrado. Mediante la opción "Refactor > Rename..." es como deberían renombrarse todos los elementos incluyendo los archivos ".java". Como así es como se han actualizado todas las referencias, no deberían de aparecer problemas a la hora de compilar. Como estamos renombrando unos determinados elementos, también será posible actualizar las referencias que haya dentro de los comentarios de Javadoc, comentarios normales y en la cadenas de caracteres entrecomilladas, lo cual también puede resultar bastante útil. La opción "Preview" nos permitirá comprobar que no se producirá ningún tipo de error en todo este proceso de renombrado. 


La documentación Javadoc externa puede ser consultada dentro de las preferencias del JRE instalado ("Window > Preferences > Installed JRE") y haciendo click en "Edit" en la ubicación del Javadoc. De esta forma, si dejamos el ratón sobre el nombre de la clase y pulsamos "Shift + F2" se abrirá la documentación en el punto adecuado. 

 Importar Archivos JAR

En algunas ocasiones necesitaremos importar algunos archivos JAR que no están incluidos por defecto con el JRE de JAVA por defecto para que nuestro proyecto pueda compilar. Tan solo tenemos que pulsar el botón derecho sobre la carpeta que deseemos y elegir "Properties > Java Build Path", seleccionamos la pestaña "Libraries", pulsamos el botón "Add External Jars" y por último seleccionamos el archivo ".jar" o ".zip". El nuevo JAR que hemos añadido será visible en la ventana Package Explorer como si fuese un pequeño frasco. 

Perspectivas:
    Resource: esta perspectiva está muy ligada al sistema de archivos, ya que almacena la localización física de los recursos que se encuentran dentro de los proyectos
    Java: la perspectiva JAVA se centra básicamente en las teareas de programación mostrándonos los paquetes, las clases, los métodos y los atributos de sus vistas asociadas.
    Plug-in development: esta perspectiva le permite a los desarrolladores que lo deseen añadir nuevos módulos al propio IDE de eclipse.
    Install/Update: nos permite gestionar cuales son los elementos instalados, además de poder ver sus versiones, conflictos y actualizarlos a un versión más reciente.
    Debug: esta perspectiva está centrada en las labores de depuración. Está centrada en los procesos en ejecución, los puntos de ruptura, las variables, salidas, etc.
    Java Browsing: esta perspectiva permite ojear rápidamente código, proyectos, paquetes y jerarquías.

 Ir al Último Cambio

El icono que encontramos en el menú identificado como una "flecha con asterisco" nos sirve para colocar el cursor en el último punto que ha sido modificado dentro del editor activo. Es muy normal que tras haber realizado algún cambio en el código nos desplacemos hasta otra parte del editor para revisar otra parte. En caso de que deseásemos volver al punto que hemos editado podríamos hacerlo haciendo uso de la tecla mapeada por defecto "CRTL + Q". 

Dos métodos de la misma clase pueden tener el mismo nombre, pero distinta signatura. Los métodos con el mismo nombre (pero con diferentes signaturas) se llaman métodos sobrecargados. Por ejemplo, el método substring() de la clase String. Tendria mismo nombre y diferentes parametros de entrada. 

Decimos que un método es recursivo cuando dentro de sus instrucciones realiza una llamada a si mismo.

FALTA VER DESARROLLO DE CLASES

